from datetime import datetime, timezone
from aiogram import F

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from keyboards.inline import (auctioning_off_kb, back_to_menu_kb, buy_now_kb)
from database.models import Listing, Group, PostedMessage
from database.orm_query import orm_get_or_create_user
from .utils import create_listing_caption, extract_number
from states.states import AddProduct
from .base_handler import BaseItemHandler

class ProductHandler(BaseItemHandler):
    states = AddProduct
    start_prompt_text = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:"
    price_promt_text = "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–≤ ‚Ç¨):"

    def __init__(self, bot, session_maker, redis, scheduler):
        super().__init__(bot, session_maker, redis, scheduler)
        self._register_handlers()

    async def add_price(self, message: Message, state: FSMContext):
        price = extract_number(message.text)
        if price is None:
            await message.reply('–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏!')
            await state.set_state(self.states.price)
            return
        
        if price <= 0.1:
            await message.reply('–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.1!')
            await state.set_state(self.states.price)
            return

        await state.update_data(price=price)
        data = await state.get_data()
            
        caption_text = create_listing_caption(data, is_auction=False, is_confirmation=True)
        markup = auctioning_off_kb()

        if data.get('photo_type') == 'photo':
            await message.answer_photo(photo=data["photo"],
                caption=caption_text,
                reply_markup=markup)
        else:
            await message.answer_document(document=data["photo"],
                caption=caption_text,
                reply_markup=markup)
        await state.set_state(self.states.check_state)
    
    async def confirm_creation(self, callback:CallbackQuery, state: FSMContext):
        data = await state.get_data()
        try:
            async with self.session_maker() as session:
                result = await session.execute(select(Group))
                active_groups = result.scalars().all()
                if not active_groups:
                    await callback.message.edit_caption(caption="‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—É.",
                                                        reply_markup=back_to_menu_kb())
                    await state.clear()
                    return
                
                user = await orm_get_or_create_user(session, callback.from_user)
                obj = Listing(creator_user_id=user.user_id,
                              listing_type='sale',
                              lot_name=data['name'],
                              lot_photo=data['photo'],
                              lot_description=data['description'],
                              price=float(data['price']),
                              start_time=datetime.now(timezone.utc))
                session.add(obj)
                await session.flush()
                product_id = obj.id

                for group in active_groups:
                    try:
                        reply_markup = buy_now_kb(float(data['price']), product_id)
                        caption = create_listing_caption(data, is_auction=False, is_confirmation=False)

                        if data.get('photo_type') == 'photo':
                            sent_message = await self.bot.send_photo(chat_id=group.id,
                                photo=data["photo"],
                                caption=caption,
                                reply_markup=reply_markup)
                        else:
                            sent_message = await self.bot.send_document(chat_id=group.id,
                                document=data["photo"],
                                caption=caption,
                                reply_markup=reply_markup)
                            
                        posted_msg_obj = PostedMessage(listing_id=product_id,
                                                       chat_id=sent_message.chat.id,
                                                       message_id=sent_message.message_id)
                        session.add(posted_msg_obj)
                    except Exception as e:
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {group.id}: {e}")

                await session.commit()

            success_caption = "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂!"
            await callback.message.edit_caption(caption=success_caption,
                                                reply_markup=back_to_menu_kb())
            await callback.answer()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
            try:
                await callback.message.edit_caption(caption="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                                                    reply_markup=back_to_menu_kb())
            except Exception as edit_error:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {edit_error}")
            await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        finally:
            await state.clear()

    async def handle_purchase(self, callback: CallbackQuery):
        product_id = int(callback.data.split(":")[1])
        buyer_user_info = callback.from_user

        product = None
        buyer = None
        seller = None

        async with self.session_maker() as session:
            product = await session.get(Listing, product_id, options=[selectinload(Listing.creator)])

            if not product or product.listing_type != 'sale':
                await callback.answer("‚ùóÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return
                
            if product.buyer_id:
                await callback.answer("üèÉ‚Äç‚ôÇÔ∏è –ù–∞ –∂–∞–ª—å, —Ö—Ç–æ—Å—å –≤–∂–µ –∫—É–ø–∏–≤ —Ü–µ–π —Ç–æ–≤–∞—Ä.", show_alert=True)
                return
                
            if product.creator_user_id == buyer_user_info.id:
                await callback.answer("‚ùóÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ç–æ–≤–∞—Ä.", show_alert=True)
                return

            buyer = await orm_get_or_create_user(session, buyer_user_info)
            seller = product.creator
                
            product.buyer_id = buyer.user_id
            product.last_price = product.price
            product.end_time = datetime.now(timezone.utc)

            await session.commit()

        try:
            buyer_display = f"@{buyer.username}" if buyer.username else buyer.user_id
            final_caption = (f"{callback.message.caption}\n\n"
                             f"‚úÖ <b>–ü–†–û–î–ê–ù–û!</b>\n"
                             f"üë§ –ü–æ–∫—É–ø–µ—Ü—å: {buyer_display}\n"
                             f"üí∞ –¶—ñ–Ω–∞: <b>{product.price:.2f} ‚Ç¨</b>")
            
            await callback.message.edit_caption(caption=final_caption, reply_markup=None)
            await callback.answer("üéâ –í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é!")

            seller_display = f"@{seller.username}" if seller.username else f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑ ID {seller.user_id}"

            await self.bot.send_message(seller.user_id,
                f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à —Ç–æ–≤–∞—Ä ¬´<b>{product.lot_name}</b>¬ª –±—É–≤ –∫—É–ø–ª–µ–Ω–∏–π.\n\n"
                f"üë§ –ü–æ–∫—É–ø–µ—Ü—å: {buyer_display}\n"
                f"üí∞ –¶—ñ–Ω–∞: <b>{product.last_price:.2f} ‚Ç¨</b>\n\n"
                f"–ü–æ–∫—É–ø–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤'—è–∑–∫—É.")

            buyer_message = (f'üéâ –í—ñ—Ç–∞—î–º–æ –∑ —É—Å–ø—ñ—à–Ω–æ—é –ø–æ–∫—É–ø–∫–æ—é —Ç–æ–≤–∞—Ä—É: ¬´<b>{product.lot_name}</b>¬ª!\n\n'
                             f"üí∂ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>{product.price:.2f} ‚Ç¨</b>\n"
                             f"üë§ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —É–≥–æ–¥–∏ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º: {seller_display}\n\n"
                             f"–î—è–∫—É—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!")
        
            await self.bot.send_message(buyer_user_info.id, buyer_message)

        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂: {e}")
        except Exception as e:
            print(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏: {e}")

    def _register_handlers(self):
        self.private_router.callback_query.register(self.start_creation, F.data == 'add_product')

        self.private_router.message.register(self.add_price, F.text, self.states.price)
        self.private_router.callback_query.register(self.confirm_creation, F.data == 'confirm_lot', self.states.check_state)

        self.public_router.callback_query.register(self.handle_purchase, F.data.startswith('buy:'))