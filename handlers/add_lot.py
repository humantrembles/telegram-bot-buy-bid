from datetime import datetime, timedelta, timezone

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from apscheduler.triggers.date import DateTrigger
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from .base_handler import BaseItemHandler
from keyboards.inline import (auctioning_off_kb, price_kb,
                              back_to_menu_kb)
from database.models import Listing, User, Group, PostedMessage
from database.orm_query import orm_get_or_create_user
from create_bot import redis
from .utils import (create_listing_caption, extract_number, key_auc_price,
                            key_auc_last_user, key_auc_status_msg, key_auc_end_time,
                            key_auc_info_msg)
from states.states import AddLot

async def _get_time_str(redis_conn, auction_id: int) -> str:
    end_time_raw = await redis_conn.get(key_auc_end_time(auction_id))
    if not end_time_raw:
        return "–ù–µ–≤—ñ–¥–æ–º–æ"
    end_time = datetime.fromisoformat(end_time_raw.decode())
    now = datetime.now(timezone.utc)
    remaining = end_time - now
    if remaining.total_seconds() > 0:
        m, s = divmod(int(remaining.total_seconds()), 60)
        return f"–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {m} —Ö–≤ {s} —Å–µ–∫"
    else:
        return "ü•∏"

class AuctionHandler(BaseItemHandler):
    states = AddLot
    start_prompt_text = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞—É–∫—Ü—ñ–æ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞:"
    price_promt_text = "–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É —Ü—ñ–Ω—É (–≤ ‚Ç¨):"

    def __init__(self, bot, session_maker, redis, scheduler):
        super().__init__(bot, session_maker, redis, scheduler)
        self._register_handlers()

    async def add_price(self, message: Message, state: FSMContext):
        price = extract_number(message.text)
        if price is None:
            await message.reply('–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏!')
            await state.set_state(self.states.price)
            return
        
        if price <= 0.1:
            await message.reply('–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.1!')
            await state.set_state(self.states.price)
            return

        await state.update_data(price=price)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–∫—Ü—ñ–æ–Ω—É (—É —Ö–≤–∏–ª–∏–Ω–∞—Ö):')
        await state.set_state(self.states.duration)

    async def add_duration(self, message: Message, state: FSMContext):
        duration = extract_number(message.text)
        if not duration or int(duration) < 1:
            await message.reply('–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–∫—Ü—ñ–æ–Ω—É - 1 —Ö–≤–∏–ª–∏–Ω–∞!')
            await state.set_state(self.states.duration)
        else:
            await state.update_data(duration=duration)
            data = await state.get_data()

            caption = create_listing_caption(data, is_auction=True, is_confirmation=True)
            markup = auctioning_off_kb()
            if data.get('photo_type') == 'photo':
                await message.answer_photo(photo=data["photo"],
                                           caption=caption,
                                           reply_markup=markup)
            else:
                await message.answer_document(document=data["photo"],
                                              caption=caption,
                                              reply_markup=markup)
            await state.set_state(self.states.check_state)
    
    async def confirm_creation(self, callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        try:
            duration = float(data['duration'])
            start_time = datetime.now(timezone.utc)
            end_time = start_time + timedelta(minutes=duration)
            async with self.session_maker() as session:
                result = await session.execute(select(Group))
                active_groups = result.scalars().all()
                if not active_groups:
                    await callback.message.edit_caption(caption="‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—É.",
                                                        reply_markup=back_to_menu_kb())
                    await state.clear()
                    return
                
                user = await orm_get_or_create_user(session, callback.from_user)
                obj = Listing(creator_user_id = user.user_id,
                    listing_type = 'auction',
                    lot_name = data['name'],
                    lot_photo = data['photo'],
                    lot_description = data['description'],
                    price = float(data['price']),
                    start_time = start_time,
                    end_time = end_time)
                session.add(obj)
                await session.flush()
                auction_id = obj.id 

                print(f"–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î –æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è –∞—É–∫—Ü—ñ–æ–Ω—É ID: {auction_id}")
                keys_to_delete = [key_auc_price(auction_id),
                                  key_auc_last_user(auction_id),
                                  key_auc_status_msg(auction_id),
                                  key_auc_end_time(auction_id),
                                  key_auc_info_msg(auction_id)]
                await self.redis.delete(*keys_to_delete)

                for group in active_groups:
                    try:
                        reply_markup = price_kb(float(data['price']), auction_id)
                        caption = create_listing_caption(data, is_auction=True, is_confirmation=False)

                        if data.get('photo_type') == 'photo':
                            sent_message = await self.bot.send_photo(
                                chat_id=group.id,         
                                photo=data["photo"],
                                caption=caption,
                                reply_markup=reply_markup)
                        else:
                            sent_message = await self.bot.send_document(
                                chat_id=group.id,
                                document=data["photo"],
                                caption=create_listing_caption(data, is_auction=True, is_confirmation=False),
                                reply_markup=reply_markup)
                            
                        posted_msg_obj = PostedMessage(listing_id = auction_id,
                                                      chat_id=sent_message.chat.id,
                                                      message_id=sent_message.message_id)
                        session.add(posted_msg_obj)
                    except Exception as e:
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {group.id}: {e}")

                await session.commit()
            
                await self.redis.set(key_auc_price(auction_id),  float(data['price'])) 
                await self.redis.set(key_auc_end_time(auction_id), end_time.isoformat())
                self.scheduler.add_job(self._finish_auction_job,
                                  trigger=DateTrigger(run_date=end_time),
                                  args=[auction_id],
                                  id=f"finish_auc:{auction_id}")
            success_caption = "‚úÖ –ê—É–∫—Ü—ñ–æ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ!"
            await callback.message.edit_caption(caption=success_caption,
                                                reply_markup=back_to_menu_kb())
            await callback.answer()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –ª–æ—Ç—É: {e}")
            try:
                await callback.message.edit_caption(caption="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞—É–∫—Ü—ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                                                    reply_markup=back_to_menu_kb())
            except Exception as edit_error:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {edit_error}")
            await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞—É–∫—Ü—ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        finally:
            await state.clear()

    async def _finish_auction_job(self, auction_id: int):
        print(f"–ü—ñ–¥–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ –∞—É–∫—Ü—ñ–æ–Ω—É {auction_id}...")

        try:
            final_price_raw = await self.redis.get(key_auc_price(auction_id))
            last_user_id_raw = await self.redis.get(key_auc_last_user(auction_id))
            winner_user = None

            async with self.session_maker() as session:
                auction = await session.get(Listing,
                                            auction_id,
                                            options=[selectinload(Listing.creator), selectinload(Listing.posted_message)])
                if not auction or not auction.creator:
                    print(f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—É–∫—Ü—ñ–æ–Ω {auction_id} –∞–±–æ –π–æ–≥–æ —Ç–≤–æ—Ä—Ü—è –≤ –ë–î")
                    return
        
                seller = auction.creator
                seller_display = f"@{seller.username}" if seller.username else f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑ ID {seller.user_id}"
                
                final_price = float(final_price_raw) if final_price_raw else auction.price
                
                if last_user_id_raw:
                    winner_id = int(last_user_id_raw)
                    try:
                        winner_aiogram_user = await self.bot.get_chat(winner_id)
                        winner_user = await orm_get_or_create_user(session, winner_aiogram_user)     
                        auction.buyer_id = winner_user.user_id
                        auction.last_price = final_price
                    except Exception as e:
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è {winner_id}: {e}")
                        winner_user = None
                
                if not winner_user:
                    auction.last_price = auction.price

                await session.commit()  

            header = (f'üéÅ <b>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É:</b> {auction.lot_name}\n'
                      f'üìù <b>–û–ø–∏—Å:</b> {auction.lot_description}\n'
                      f'üí∂ <b>–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞:</b> {auction.price:.2f} ‚Ç¨')
        
            final_status = "–ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

            if winner_user:
                winner_display = f"@{winner_user.username}" if winner_user.username else f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑ ID {winner_user.user_id}"
                final_result = f"–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner_display}, –æ—Å—Ç–∞—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: <b>{final_price:.2f} ‚Ç¨</b>"
                # 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂
                seller_message = (f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à –∞—É–∫—Ü—ñ–æ–Ω –Ω–∞ –ª–æ—Ç ¬´<b>{auction.lot_name}</b>¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                                  f"üë§ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner_display}\n"
                                  f"üí∞ –§—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: <b>{final_price:.2f} ‚Ç¨</b>\n\n"
                                  f"–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤'—è–∑–∫—É.")
                # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü—è
                winner_message = (f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ –≤ –∞—É–∫—Ü—ñ–æ–Ω—ñ –π –≤–∏–≥—Ä–∞–ª–∏ –ª–æ—Ç –∑ –Ω–∞–∑–≤–æ—é ¬´<b>{auction.lot_name}</b>¬ª!\n\n"
                                  f"üí∞ –í–∏–≥—Ä–∞—à–Ω–∞ —Å—Ç–∞–≤–∫–∞: <b>{final_price:.2f} ‚Ç¨</b>\n"
                                  f"üë§ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —É–≥–æ–¥–∏ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º: {seller_display}\n\n"
                                  f"–î—è–∫—É—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!")
                try:
                    await self.bot.send_message(winner_user.user_id, winner_message)
                except TelegramForbiddenError:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {winner_user.user_id}. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
                    seller_message += "\n\n‚ùóÔ∏è<b>–í–∞–∂–ª–∏–≤–æ:</b> –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é. –°—Ö–æ–∂–µ, –≤—ñ–Ω –Ω–µ –ø–æ—á–∏–Ω–∞–≤ –¥—ñ–∞–ª–æ–≥—É –∑ –±–æ—Ç–æ–º –∞–±–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤."
                try:
                    await self.bot.send_message(seller.user_id, seller_message)
                except TelegramForbiddenError:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é {seller.user_id}. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
            else:
                final_result = "–ù–∞ –∂–∞–ª—å, –Ω–µ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Å—Ç–∞–≤–∫–∏."
                seller_message_no_bids = (f"üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à –∞—É–∫—Ü—ñ–æ–Ω –Ω–∞ –ª–æ—Ç ¬´<b>{auction.lot_name}</b>¬ª –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –±–µ–∑ –∂–æ–¥–Ω–æ—ó —Å—Ç–∞–≤–∫–∏.")
                try:
                    await self.bot.send_message(seller.user_id, seller_message_no_bids)
                except TelegramForbiddenError:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é {seller.user_id} –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç–∞–≤–æ–∫. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")

            final_block = (f"\n\nüèÅ<b>–ü–Ü–î–°–£–ú–ö–ò!</b>\n"
                           f"<b>–°—Ç–∞—Ç—É—Å:</b> {final_status}\n"
                           f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {final_result}")
            full_final_caption = header + final_block

            for posted_msg in auction.posted_message:
                try:
                    await self.bot.edit_message_caption(chat_id=posted_msg.chat_id,
                                           message_id=posted_msg.message_id,
                                           caption=full_final_caption,
                                           reply_markup=None)
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {posted_msg.message_id} –≤ —á–∞—Ç—ñ {posted_msg.chat_id}: {e}")

            status_msg_info = await redis.hgetall(key_auc_status_msg(auction_id))
            if status_msg_info:
                try:
                    await self.bot.delete_message(chat_id=int(status_msg_info[b"chat_id"]),
                        message_id=int(status_msg_info[b"message_id"]))
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        except Exception as e:
            print(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ _finish_auction_job –¥–ª—è –∞—É–∫—Ü—ñ–æ–Ω—É {auction_id}: {e}")
        finally:
            print(f"–û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö Redis –¥–ª—è –∞—É–∫—Ü—ñ–æ–Ω—É {auction_id}...")
            keys_to_delete = [key_auc_price(auction_id),
                              key_auc_last_user(auction_id),
                              key_auc_status_msg(auction_id),
                              key_auc_end_time(auction_id),
                              key_auc_info_msg(auction_id)]
            if await self.redis.exists(*keys_to_delete):
                await self.redis.delete(*keys_to_delete)
            print(f"–î–∞–Ω—ñ –¥–ª—è –∞—É–∫—Ü—ñ–æ–Ω—É {auction_id} –æ—á–∏—â–µ–Ω–æ.")


    async def increase_bid(self, callback: CallbackQuery):
        auction_id = int(callback.data.split(":")[1])  
        user_info = callback.from_user

        price_raw = await self.redis.get(key_auc_price(auction_id))
        if price_raw is None:
            await callback.answer("‚ùóÔ∏è –ê—É–∫—Ü—ñ–æ–Ω –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", show_alert=True)
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except TelegramBadRequest:
                pass
            return

        async with self.session_maker() as session:
            auction = await session.get(Listing, auction_id)
            if not auction:
                await callback.answer("‚ùóÔ∏è –ê—É–∫—Ü—ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–≤–µ—Ä—à–∏–≤—Å—è.", show_alert=True)
                return
    
        if auction.creator_user_id == user_info.id:
            await callback.answer("‚ùóÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ –≤–ª–∞—Å–Ω–∏–π –ª–æ—Ç.", show_alert=True)
            return

        last_user_id_raw = await self.redis.get(key_auc_last_user(auction_id))
        if last_user_id_raw and int(last_user_id_raw.decode()) == user_info.id:
            await callback.answer('–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ —Å—Ç–∞–≤–∫—É.')
            return

        current_price = float(price_raw)
        bid_increment = 0.05 if current_price < 1  else (0.1 if current_price < 10 else 0.25)
    
        new_price_raw = await self.redis.incrbyfloat(key_auc_price(auction_id), bid_increment)
        new_price = round(float(new_price_raw), 2)
    
        await self.redis.set(key_auc_last_user(auction_id), user_info.id)

        user_display = f"@{user_info.username}" if user_info.username else user_info.first_name

        new_markup = price_kb(new_price, auction_id)
        await callback.message.edit_reply_markup(reply_markup=new_markup)

        time_str = await _get_time_str(self.redis, auction_id)
        text = f'{user_display} –∑—Ä–æ–±–∏–≤ —Å—Ç–∞–≤–∫—É: <b>{new_price:.2f} ‚Ç¨</b>. {time_str}'

        status_msg_info = await self.redis.hgetall(key_auc_status_msg(auction_id))

        try:
            if not status_msg_info:
                sent_message = await callback.message.reply(text)
                await self.redis.hset(key_auc_status_msg(auction_id), mapping={
                    "message_id": sent_message.message_id,
                    "chat_id": sent_message.chat.id})
            else:
                await self.bot.edit_message_text(chat_id=int(status_msg_info[b"chat_id"]),
                                                             message_id=int(status_msg_info[b"message_id"]),
                                                             text=text)
        except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ status_message: {e}")
        await callback.answer()

    def _register_handlers(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞ private_router –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.private_router.callback_query.register(self.start_creation, F.data == 'add_lot')
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
        self.private_router.message.register(self.add_price, F.text, self.states.price)
        self.private_router.message.register(self.add_duration, F.text, self.states.duration)
        self.private_router.callback_query.register(self.confirm_creation, F.data == 'confirm_lot', self.states.check_state)
        
        #–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ public_router –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.public_router.callback_query.register(self.increase_bid, F.data.startswith('bid:'))