from typing import Optional

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from create_bot import admins
from states.states import AdminStates
from keyboards.inline import back_button_kb

from database.models import User

admin_router = Router()
admin_router.message.filter(F.from_user.id.in_(admins))
admin_router.callback_query.filter(F.from_user.id.in_(admins))

@admin_router.callback_query(F.data == 'admin_panel')
async def admin_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.\n–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
    await callback.answer()
    await state.set_state(AdminStates.get_user_id)

@admin_router.message(AdminStates.get_user_id)
async def get_user_id(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    user_id_to_check = int(message.text)

    user_stmt = await session.execute(select(User).where(User.user_id == user_id_to_check))
    user: Optional[User] = user_stmt.scalar_one_or_none()

    await state.clear()

    if not user:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID `{user_id_to_check}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        return 
    
    if user.is_banned:
        await message.answer(
            f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.</b>\n\n"
            f'ID: "{user.user_id}"\n'
            f"Username: @{user.username if user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {user.warnings_count}"
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text = "–í–∏–¥–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è üëÆ",
                                      callback_data=f"warn_user:{user.user_id}"))
    
    await message.answer(f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n"
        f"ID: `{user.user_id}`\n"
        f"Username: @{user.username if user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {user.warnings_count}",
        reply_markup=keyboard.as_markup())
    
@admin_router.callback_query(F.data.startswith("warn_user:"))
async def warn_user(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id_to_warn = int(callback.data.split(":")[1])

    user_stmt = await session.execute(select(User).where(User.user_id == user_id_to_warn))
    user: Optional[User] = user_stmt.scalar_one_or_none()

    if not user:
        await callback.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!", show_alert=True)
        await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞—á—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.")
        return

    user.warnings_count +=1

    ban_message =""
    if user.warnings_count >= 3:
        user.is_banned = True
        ban_message = "\n\n<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —ñ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π!</b>"

        try:
            await bot.send_message(user.user_id,
                                   "–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –±–æ—Ç—ñ –∑–∞ –±–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è.")
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.user_id} –ø—Ä–æ –±–∞–Ω: {e}")
        
    await session.commit()

    await callback.message.edit_text(text=f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤–∏–¥–∞–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.</b>\n\n"
        f"ID: `{user.user_id}`\n"
        f"Username: @{user.username if user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {user.warnings_count}"
        f"{ban_message}",
        reply_markup=back_button_kb().as_markup())
    await callback.answer(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–Ω–æ. –í—Å—å–æ–≥–æ: {user.warnings_count}")